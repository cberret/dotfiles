## Functions


# shorthand for standard pandoc output
makepdf ()
{
  pandoc $1.md -o $1.pdf
}

# cd into whatever is the forefront Finder window.
cdf() { 
  cd "`osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)'`"
}


# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/" &
	# statik is good because it won't expose hidden folders/files by default.
	# npm install -g statik
	statik --port "$port" .
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
	# this is the best whois server
	# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

function csvpreview(){
	sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

#!/bin/bash


#### Tools to convert binary to ascii and so forth
## change character to binary
chrbin() {
  echo $(printf \\$(echo "ibase=2; obase=8; $1" | bc))
}
## convert ordinal to binary
ordbin() {
  a=$(printf '%d' "'$1")
  echo "obase=2; $a" | bc
}
## convert ascii to binary
ascii2bin() {
  echo -n $* | while IFS= read -r -n1 char
  do
    ordbin $char | tr -d '\n'
    echo -n " "
  done
}
## convert binary to ascii
bin2ascii() {
  for bin in $*
  do
    chrbin $bin | tr -d '\n'
  done
}

# who is using the laptop's iSight camera?
camerausedby() {
	echo "Checking to see who is using the iSight cameraâ€¦ ðŸ“·"
	usedby=$(lsof | grep -w "AppleCamera\|USBVDC\|iSight" | awk '{printf $2"\n"}' | xargs ps)
	echo -e "Recent camera uses:\n$usedby"
}

# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
	if [[ $2 == '--good' ]]; then
	  ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
	  rm out-static*.png
	else
	  ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
	fi
  else
	echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

# direct it all to /dev/null
function nullify() {
  "$@" >/dev/null 2>&1
}

define ()
{
lynx -dump 
"http://www.google.com/search?hl=en&q=define%3A+${1}&btnG=Google+Search" | grep 
-m 5 -w "*"  | sed 's/;/ -/g' | cut -d- -f5 > /tmp/templookup.txt
  if [[ -s  /tmp/templookup.txt ]] ;then
    until ! read response
      do
      echo "${response}"
      done < /tmp/templookup.txt
    else
      echo "Sorry $USER, I can't find the term \"${1}\""
  fi
rm -f /tmp/templookup.txt
}


weather ()
{
  declare -a WEATHERARRAY
  WEATHERARRAY=( 'lynx -dump 
"http://www.google.com/search?hl=en&lr=&client=firefox-a&rls=org.mozilla%3Aen-US%3Aofficial&q=weather+${1}&btnG=Search" 
| grep -A 5 -m 1 "Weather for"')
  echo ${WEATHERARRAY[@]}
}

translate ()
{
  TRANSLATED='lynx -dump "http://dictionary.reference.com/browse/${1}" | grep -i 
-m 1 -w "${2}:" | sed 's/^[ \t]*//;s/[ \t]*$//''
  if [[ ${#TRANSLATED} != 0 ]] ;then
    echo "echo"${1}" in ${TRANSLATED}"
  else
    echo "Sorry, I can not translate "${1}" to ${2}"
  fi
}

google() {
  search=""
  echo "Googling: $@"
  for term in $@; do
    search="$search%20$term"
  done
  xdg-open "http://www.google.com/search?q=$search"
}

libgen() {
  search=""
  echo "Searching LibraryGenesis: $@"
  for term in $@; do
     search="$search%20$term"
  done
  xdg-open "http://libgen.io/search.php?req=$search&open=0&res=25&view=simple&phrase=1&column=def"
}
