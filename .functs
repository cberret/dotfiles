#!/usr/local/bin/bash

## Functions

##################################################
###  COMMS
##################################################

#radiodeath () {
#echo -e "hardware comm interface status\n\n"
#networksetup -listallnetworkservices
#networksetup -setairportpower en0 off
#blueutil off
## this would activate 'airplane mode'
# networksetup -switchtolocation isolatedalias
## check bluetooth status
# echo -e "Bluetooth Interface"
# blueutil status
# echo e "RADIO STATUS CHECK"
# networksetup -listallnetworkservices
#}

# radiolife () {
#networksetup -setairportpower en0 on
# networksetup -listallnetworkservices
# }



##################################################
###    GIT
##################################################

# Calculate word diff between revisions of written work.

## short for "git words added"
function gwa {
  git diff --word-diff=porcelain | \
    grep -e "^+[^+]" | \
    wc -w | \
    xargs
}

## short for "git words removed"
function gwr {
  git diff --word-diff=porcelain | \
    grep -e "^-[^-]" | \
    wc -w | \
    xargs
}
## short for "git words diff"
function gwd {
  echo $(($(gwa $1) - $(gwr $1)))
}

## git word diff summary
function monster {
  echo -e "\n------------------\nWords Written: "
  gwa
  echo -e "------------------\nWords Deleted: "
  gwr
  echo -e "------------------\nLength Accumulated: "
  gwd
  echo -e "------------------\nBe sure to write again tomorrow!\n\n*%$&#@#^#&$%\n"
}

##################################################
###    PANDOC
##################################################


# shorthand for standard pandoc output
makepdf ()
{
pandoc $1.md -o $1.pdf
}

#
pandocloop ()
{
echo -e "*** This script will run Pandoc on every file in the"
echo -e "    current directory and attempt to convert each one"
echo -e "    to the format you enter below."
echo -e "*** It does NOT overwrite the original files."
echo -e "*** New files will be stored in a subdirectory."
echo
echo -e "Convert to which format?"
read outfrmt
mkdir $outfrmt
ls -1 | while read file; do
  pandoc $file -o $outfrmt/$file.$outfrmt;
  echo -e "created $outfrmt version of $file";
done
}



# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}"
	open "http://localhost:${port}/" &
	# statik is good because it won't expose hidden folders/files by default.
	# npm install -g statik
	statik --port "$port" .
}

# whois a domain or a URL
function whois() {
	local domain=$(echo "$1" | awk -F/ '{print $3}') # get domain from URL
	if [ -z $domain ] ; then
		domain=$1
	fi
	echo "Getting whois record for: $domain â€¦"

	# avoid recursion
	# this is the best whois server
	# strip extra fluff
	/usr/bin/whois -h whois.internic.net $domain | sed '/NOTICE:/q'
}

# public ip address and location
function myip() {
  pubip=$(wget -qO- ipinfo.io/ip)
  # curl freegeoip.net/xml/198.203.28.43 ## for full xml ip geolocation
  echo ">>> Public IP Address:"
  echo $pubip
  if [ -f /usr/local/var/GeoIP/GeoLiteCity.dat ]
  then
     echo ">>> Location:"
     geoiplookup -f /usr/local/var/GeoIP/GeoLiteCity.dat $pubip
  else
     echo -e "...\n...\n...\nCannot find the GeoIP locations file.\nDownload from https://dev.maxmind.com/geoip/geoip2/geolite2/\nand place in the /usr/local/var/GeoIP/ directory."
  fi
}

function csvpreview(){
	sed 's/,,/, ,/g;s/,,/, ,/g' "$@" | column -s, -t | less -#2 -N -S
}

#### Tools to convert binary to ascii and so forth
## change character to binary
char2bin() {
  echo $(printf \\$(echo "ibase=2; obase=8; $1" | bc))
}
## convert ordinal to binary
ord2bin() {
  a=$(printf '%d' "'$1")
  echo "obase=2; $a" | bc
}
## convert ascii to binary
ascii2bin() {
  echo -n $* | while IFS= read -r -n1 char
  do
    ordbin $char | tr -d '\n'
    echo -n " "
  done
}
## convert binary to ascii
bin2ascii() {
  for bin in $*
  do
    chrbin $bin | tr -d '\n'
  done
}


# animated gifs from any video
# from alex sexton   gist.github.com/SlexAxton/4989674
gifify() {
  if [[ -n "$1" ]]; then
	if [[ $2 == '--good' ]]; then
	  ffmpeg -i "$1" -r 10 -vcodec png out-static-%05d.png
	  time convert -verbose +dither -layers Optimize -resize 900x900\> out-static*.png  GIF:- | gifsicle --colors 128 --delay=5 --loop --optimize=3 --multifile - > "$1.gif"
	  rm out-static*.png
	else
	  ffmpeg -i "$1" -s 600x400 -pix_fmt rgb24 -r 10 -f gif - | gifsicle --optimize=3 --delay=3 > "$1.gif"
	fi
  else
	echo "proper usage: gifify <input_movie.mov>. You DO need to include extension."
  fi
}

###############################################################
## Functions to manipulate files and folders
###############################################################

grepmv() {
  mv `grep -lir '$1' .` $2
}

###############################################################
## Functions to launch web searches
###############################################################

duck() {
  search=""
  echo "Searching DuckDuckGo: \"$@\""
  for term in $@; do
    search="$search$term+"
  done
  firefox "https://www.duckduckgo.com/?q=$search&ia=web"
}

google() {
  search=""
  echo "Searching Google: \"$@\""
  for term in $@; do
    search="$search$term%20"
  done
  firefox "https://www.google.com/search?q=$search"
}

libgen() {
  search=""
  echo "Searching LibraryGenesis: \"$@\""
  for term in $@; do
     search="$search$term+"
  done
  firefox "http://libgen.io/search.php?req=$search&open=0&res=25&view=simple&phrase=1&column=def"
}

altern() {
  search=""
  echo "Searching AlternativeTo: \"$@\""
  for term in $@; do
     search="$search$term-"
  done
  firefox "https://alternativeto.net/browse/search/?q=$search" # goes to search page
  #firefox "https://alternativeto.net/software/$search"
}

similarto() {
  search=""
  echo "Searching for similar sites: \"$@\""
  for term in $@; do
    search="$search$term-"
  done
  firefox "https://www.similarsites.com/site/$search"
}

aaarg() {
  search=""
  echo "Searching Aaaaarg for: \"$@\""
  for term in $@; do
     search="$search$term+"
  done
  firefox "http://aaaaarg.fail/search?query=$search"
}

wayback() {
  search=$1
  echo "Searching The Wayback Machine for: $1"
  firefox "https://web.archive.org/web/*/$search"
}

wiki() {
  search="$@"
  ### do not need to parse terms into "foo+bar" form for wikipedia
  #for term in $@; do
  #  search="$search$term+"
  #done
  echo "Searching Wikipedia for: $search"
  firefox "https://en.wikipedia.org/w/index.php?search=$search"
}

wolfram() {
  search="$@"
  echo "Searching Wolfram Alpha for: $search"
  firefox "http://www.wolframalpha.com/input/?i=$search"
}

book() {
  searchurl="https://www.worldcat.org/search?qt=worldcat_org_all&q="
  for term in $@; do
    book="$book$term+"
  done
  firefox "$searchurl$book"
}


#########################################################################
#########################################################################

## TODO: define, translate, weather
# dictionary baseurl: "http://dictionary.reference.com/browse/"

# weather() {
#   location=""
#   baseurl="https://www.wunderground.com/cgi-bin/findweather/getForecast?query="
#   for term in $@; do
#     location="$location$term+"
#   done
#   lynx -dump $baseurl$location
# }

